{"name":"Roll Saving Throw","type":"script","flags":{"core":{"sourceId":"Compendium.pf1.sample-macros.ON7b8yS1lcBxkMuo"}},"scope":"global","command":"// CONFIGURATION\n// Leave the actorNames array empty to guess the players\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\nconst c = {\n  actorNames: [],\n};\n// END CONFIGURATION\n\nconst tokens = canvas.tokens.controlled;\nlet actors = tokens.map(o => o.actor);\nif (!actors.length && c.actorNames.length) actors = game.actors.filter(o => c.actorNames.includes(o.name));\nif (!actors.length) actors = game.actors.filter(o => o.isPC && o.testUserPermission(game.user, \"OWNER\"));\nactors = actors.filter(o => o.testUserPermission(game.user, \"OWNER\"));\n\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\nelse {\n  const _roll = async function(type) {\n    for (let a = 0; a < actors.length; a++) {\n      const o = actors[a];\n      await o.rollSavingThrow(type, { event: new MouseEvent({}), noSound: a > 0, });\n    }\n  };\n\n  const msg = `Choose a saving throw to roll for the following actor(s): <strong>${actors.map(o => o.name).join(\"</strong>, <strong>\")}</strong>`;\n\n  new Dialog({\n    title: \"Roll saving throw\",\n    content: `<p>${msg}</p>`,\n    buttons: {\n      fort: {\n        label: \"Fortitude\",\n        callback: () => _roll(\"fort\"),\n      },\n      ref: {\n        label: \"Reflex\",\n        callback: () => _roll(\"ref\"),\n      },\n      will: {\n        label: \"Will\",\n        callback: () => _roll(\"will\"),\n      },\n    },\n  }).render(true);\n}","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/feats/diehard.jpg","_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677285196335,"modifiedTime":1677491261728,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"3932NbYULytqFTMd","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Light Picker","type":"script","scope":"global","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/spells/light-sky-2.jpg","command":"let dialogEditor = new Dialog({\n  title: `LightPicker`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        token.document.update({light:{ dim: 0, bright: 0, color: \"#000000\", alpha: 0, angle: 360, animation:{ type: \"none\", speed: 5, intensity: 5}}});\n        dialogEditor.render(true);\n      }\n    },\n    torch: {\n      label: `Torch`,\n      callback: () => {\n        token.document.update({light:{ dim: 40, bright : 20, color : \"#ff830f\", alpha: 0.5, angle: 360, animation:{ type: \"torch\", speed: 5, intensity: 5}}});\n        dialogEditor.render(true);\n      }\n   },\n    lamp: {\n      label: `Lamp`,\n      callback: () => {\n        token.document.update({light:{ dim: 45, bright : 15, color : \"#ffa200\", alpha: 0.5, angle: 360, animation:{ type: \"torch\", speed: 3, intensity: 3}}});\n        dialogEditor.render(true);\n      }\n   },\n    bullseye: {\n      label: `BullseyeLantern`,\n      callback: () => {\n        token.document.update({light:{ dim: 120, bright : 60, color : \"#ffa200\", alpha: 0.5, angle: 45, animation:{ type: \"torch\", speed: 3, intensity: 3}}});\n        dialogEditor.render(true);\n      }\n   },\n    hoodedOpen: {\n      label: `HoodedLantern(O)`,\n      callback: () => {\n        token.document.update({light:{ dim: 60, bright : 30, color : \"#ffa200\", alpha: 0.5, angle: 360, animation:{ type: \"torch\", speed: 3, intensity: 3}}});\n        dialogEditor.render(true);\n      }\n   },\n    hoodedClosed: {\n      label: `HoodedLantern(C)`,\n      callback: () => {\n        token.document.update({light:{ dim: 5, bright : 0, color : \"#ffa200\", alpha: 0.5, angle: 360, animation:{ type: \"torch\", speed: 3, intensity: 3}}});\n        dialogEditor.render(true);\n      }\n    },\n    lightcantrip: {\n      label: `LightCantrip`,\n      callback: () => {\n        token.document.update({light:{ dim: 40, bright : 20, color : \"#fffab8\", alpha: 0.5, angle: 360, animation:{ type: \"torch\", speed: 2, intensity: 1}}});\n        dialogEditor.render(true);\n      }\n    },\t\n    moontouched: {\n      label: `MoonTouched`,\n      callback: () => {\n        token.document.update({light:{ dim: 30, bright : 15, color : \"#38c0f3\", alpha: 0.5, angle: 360, animation:{ type: \"torch\", speed: 1, intensity: 1}}});\n        dialogEditor.render(true);\n      }\n    },\n    sunlight: {\n      label: `SunLight`,\n      callback: () => {\n        token.document.update({light:{ dim: 60, bright : 30, color : \"#fff45c\", alpha: 0.6, angle: 360, animation:{ type: \"torch\", speed: 1, intensity: 5}}});\n        dialogEditor.render(true);\n      }\n    },\n\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Exit`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\ndialogEditor.render(true)","flags":{"core":{"sourceId":"Macro.8tCetPBzvhUeltK5"}},"_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677076184124,"modifiedTime":1677491261733,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"8tCetPBzvhUeltK5","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Rest all Players","type":"script","scope":"global","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/items/inventory/cloth-red.jpg","command":"const actors = game.actors.filter(a => a.hasPlayerOwner);\n\nconst performRest = async (data) => {\n\tconst promises = [];\n\tfor (const actor of actors) {\n\t\ttry {\n\t\t\tconst p = actor.performRest(data);\n\t\t\tpromises.push(p);\n\t\t}\n\t\tcatch (err) {\n\t\t\tui.notifications.error(`Error resting \"${actor.name}\"`, { console: false });\n\t\t\tconsole.error(actor.name, 'couldn\\'t rest\\n', err, actor);\n\t\t}\n\t}\n\n\tawait Promise.allSettled(promises);\n\tui.notifications.info('All actors rested.');\n};\n\nclass RestConfigDialog extends FormApplication {\n\tstatic get defaultOptions() {\n\t\tconst options = super.defaultOptions;\n\t\treturn {\n\t\t\t...options,\n\t\t\tclasses: ['pf1', 'actor-mass-rest'],\n\t\t\ttemplate: 'systems/pf1/templates/apps/actor-rest.hbs',\n\t\t\twidth: 500,\n\t\t\tcloseOnSubmit: true\n\t\t};\n\t}\n\n\tget title() {\n\t\treturn game.i18n.localize('PF1.Rest');\n\t}\n\n\t_updateObject(event, formData) {\n\t\tperformRest(formData);\n\t}\n}\n\nif (actors.length) {\n\tnew RestConfigDialog().render(true, { focus: true });\n}\nelse {\n\tui.notifications.warn('No actors selected.');\n}","flags":{"core":{"sourceId":"Macro.Hsw8cFEhEqRXTRsN"}},"_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1675553303257,"modifiedTime":1677491261738,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"Hsw8cFEhEqRXTRsN","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Aura Picker","type":"script","scope":"global","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/spells/runes-blue-3.jpg","command":"let dialogEditor = new Dialog({\n  title: `AuraPicker`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        token.document.update({light:{ dim: 0, bright: 0, color: \"#000000\", alpha: 0, animation:{ type: \"none\", speed: 5, intensity: 5}}});\n        dialogEditor.render(true);\n      }\n   },\n    sphere10: {\n      label: `Sphere10`,\n      callback: () => {\n        token.document.update({light:{ dim: 10, bright : 5, color : \"#e1c8ff\", alpha: 0.5, angle: 360, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n   },\n    sphere30: {\n      label: `Sphere30`,\n      callback: () => {\n        token.document.update({light:{ dim: 30, bright : 15, color : \"#e1c8ff\", alpha: 0.5, angle: 360, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n   },\n    sphere60: {\n      label: `Sphere60`,\n      callback: () => {\n        token.document.update({light:{ dim: 60, bright : 30, color : \"#e1c8ff\", alpha: 0.5, angle: 360, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n   },\n    sphere80: {\n      label: `Sphere80`,\n      callback: () => {\n        token.document.update({light:{ dim: 80, bright : 40, color : \"#e1c8ff\", alpha: 0.5, angle: 360, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n   },\n    sphere100: {\n      label: `Sphere100`,\n      callback: () => {\n        token.document.update({light:{ dim: 100, bright : 50, color : \"#e1c8ff\", alpha: 0.5, angle: 360, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n\t  \n   },\n    cone10: {\n      label: `Cone10`,\n      callback: () => {\n        token.document.update({light:{ dim: 10, bright : 5, color : \"#e1c8ff\", alpha: 0.5, angle: 45, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n   },\n    cone30: {\n      label: `Cone30`,\n      callback: () => {\n        token.document.update({light:{ dim: 30, bright : 15, color : \"#e1c8ff\", alpha: 0.5, angle: 45, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n  },\n    cone60: {\n      label: `Cone60`,\n      callback: () => {\n        token.document.update({light:{ dim: 60, bright : 30, color : \"#e1c8ff\", alpha: 0.5, angle: 45, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n  },\n    cone80: {\n      label: `Cone80`,\n      callback: () => {\n        token.document.update({light:{ dim: 80, bright : 40, color : \"#e1c8ff\", alpha: 0.5, angle: 45, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n  },\n    cone100: {\n      label: `Cone100`,\n      callback: () => {\n        token.document.update({light:{ dim: 100, bright : 50, color : \"#e1c8ff\", alpha: 0.5, angle: 45, animation:{ type: \"emanation\", speed: 5, intensity: 7}}});\n        dialogEditor.render(true);\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Exit`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\ndialogEditor.render(true)","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Iqde2vAOztNK7C8o"}},"_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677076280950,"modifiedTime":1677491261742,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"Iqde2vAOztNK7C8o","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Toggle Buff","type":"script","flags":{"core":{"sourceId":"Compendium.pf1.sample-macros.ccZmfabwQrONq2kg"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// CONFIGURATION\n// If one or more tokens are selected, those will be used instead of the listed actors\n// Leave the actorNames array empty to guess the players\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\nconst c = {\n  actorNames: [],\n  buffName: \"Mage Armor\"\n};\n// END CONFIGURATION\n\nconst tokens = canvas.tokens.controlled;\nlet actors = tokens.map(o => o.actor);\nif (!actors.length && c.actorNames.length) actors = game.actors.filter(o => c.actorNames.includes(o.name));\nif (!actors.length) actors = game.actors.filter(o => o.isPC);\nactors = actors.filter(o => o.testUserPermission(game.user, \"OWNER\"));\n\nif (!actors.length) ui.notifications.warn(\"No applicable actor(s) found\");\nelse {\n  for (const actor of actors) {\n    const buff = actor.items.find(o => o.name === c.buffName && o.type === \"buff\");\n    if (buff != null) {\n      let active = getProperty(buff, \"system.active\");\n      if (active == null) active = false;\n      buff.update({ \"system.active\": !active });\n    }\n  }\n}","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/spells/protect-blue-1.jpg","_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677285190183,"modifiedTime":1677491261751,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"fse7frxU48juo1mq","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Vision picker","type":"script","scope":"global","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/skills/blue_17.jpg","command":"let dialogEditor = new Dialog({\n  title: `VisionPicker`,\n  buttons: {\n    none: {\n      label: `Normal`,\n      callback: () => {\n        token.document.update({\"dimSight\": 0, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\n    darkvision30: {\n      label: `DV 30`,\n      callback: () => {\n        token.document.update({\"dimSight\": 30, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\n    darkvision60: {\n      label: `DV 60`,\n      callback: () => {\n        token.document.update({\"dimSight\": 60, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\t\n    darkvision80: {\n      label: `DV 80`,\n      callback: () => {\n        token.document.update({\"dimSight\": 80, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\n    darkvision120: {\n      label: `DV 120`,\n      callback: () => {\n        token.document.update({\"dimSight\": 120, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\n    darkvision150: {\n      label: `DV 150`,\n      callback: () => {\n        token.document.update({\"dimSight\": 150, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\n    darkvision180: {\n      label: `DV 180`,\n      callback: () => {\n        token.document.update({\"dimSight\": 180, \"brightSight\": 0, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\n    blind: {\n      label: `Blinded`,\n      callback: () => {\n        token.document.update({\"dimSight\": 0, \"brightSight\": 0, \"vision\":false,});\n        dialogEditor.render(true);\n      }\n    },\t\n    devilsight: {\n      label: `Devils Sight`,\n      callback: () => {\n        token.document.update({\"dimSight\": 0, \"brightSight\": 120, \"vision\":true,});\n        dialogEditor.render(true);\n      }\n    },\t\t  \n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Exit`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\ndialogEditor.render(true)","flags":{"core":{"sourceId":"Macro.jqscCtQaHkp1fFVo"}},"_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677076338349,"modifiedTime":1677491261756,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"jqscCtQaHkp1fFVo","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"resetSpellCosts.js","type":"script","author":"zur4Ts3bq8FsHWRr","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * Reset spell costs.\n *\n * This does not touch spellpoint costs!\n *\n * Compatibility:\n * - Foundry v10\n * - Pathfinder 1e 0.82.3–0.82.5\n */\n\nconst resetOnlySpecificActionFormula = true; // If false, all action formulas are reset\nconst specificBadActionFormula = '1 + @sl';\nconst unlockCompendiums = false; // Set to true to automatically unlock&relock compendiums\n\nconst getFormula = (spell) => {\n\t// Cantrips consume no slots.\n\tif (spell.system.level === 0)\n\t\treturn '0';\n\n\t// Empty formula for everything else, to let things fall back to default behaviour\n\treturn '';\n}\n\nlet fixCounter = 0, spellsIgnored = 0;\nconst generateSpellFix = (spell) => {\n\tconst formula = getFormula(spell);\n\tconst currentFormula = spell.system.uses.autoDeductChargesCost;\n\tconst updateData = {\n\t\t_id: spell.id,\n\t\tsystem: { }\n\t};\n\tlet updated = false;\n\tif (currentFormula === undefined && !formula) {\n\t\t// NOP, already reset\n\t}\n\telse if (currentFormula !== formula || !formula) {\n\t\tupdateData.system.uses = {};\n\t\tif (!formula)\n\t\t\tupdateData.system.uses['-=autoDeductChargesCost'] = null;\n\t\telse\n\t\t\tupdateData.system.uses.autoDeductChargesCost = formula;\n\n\t\tupdated = true;\n\t}\n\n\t// Reset actions, too.\n\tconst actions = deepClone(spell._source.system.actions ?? []);\n\tif (actions) {\n\t\tlet actionsUpdated = false;\n\t\tfor (const action of actions) {\n\t\t\tconst aformula = action.uses.autoDeductChargesCost;\n\t\t\tif (!aformula) continue;\n\t\t\tif (resetOnlySpecificActionFormula && aformula !== specificBadActionFormula) continue;\n\n\t\t\tactionsUpdated = updated = true;\n\t\t\tdelete action.uses.autoDeductChargesCost;\n\t\t}\n\n\t\tif (actionsUpdated) {\n\t\t\tupdateData.system.actions = actions;\n\t\t}\n\t}\n\n\tif (updated) {\n\t\tfixCounter += 1;\n\t\treturn updateData;\n\t}\n\telse {\n\t\tspellsIgnored += 1;\n\t}\n}\n\nconst fixActor = (actor, immediate = true) => {\n\tconst spells = actor.items.filter(i => i.type === 'spell');\n\tconst updates = [];\n\tfor (const spell of spells) {\n\t\tconst update = generateSpellFix(spell);\n\t\tif (update) updates.push(update);\n\t}\n\n\tif (updates.length) {\n\t\tif (immediate)\n\t\t\treturn actor.updateEmbeddedDocuments('Item', updates);\n\t\telse\n\t\t\treturn { _id: actor.id, items: updates };\n\t}\n}\n\nconst fixScene = async (scene) => {\n\tfor (const token of scene.tokens) {\n\t\tif (!token.actor) continue;\n\t\tawait fixActor(token.actor);\n\t}\n}\n\nconst fixPack = async (pack) => {\n\tconst wasLocked = pack.locked;\n\tif (wasLocked && !unlockCompendiums) return;\n\tconst isActor = pack.metadata.type === 'Actor',\n\t\tisItem = pack.metadata.type === 'Item';\n\tif (!isActor && !isItem) return;\n\n\tconst updates = [];\n\tconst promises = [];\n\n\tconst fixPackSpell = async (indexData) => {\n\t\tconst spell = await pack.getDocument(indexData._id);\n\t\tconst update = generateSpellFix(spell);\n\t\tif (update) updates.push(update);\n\t}\n\n\tconst fixPackActor = async (indexData) => {\n\t\tconst actor = await pack.getDocument(indexData._id);\n\t\tconst update = fixActor(actor, false);\n\t\tif (update) updates.push(update);\n\t}\n\n\tconsole.log('>>> Checking:', pack.collection);\n\n\tpack.index.forEach(indexData => {\n\t\tif (isItem) {\n\t\t\tif (indexData.type !== 'spell') return;\n\t\t\tpromises.push(fixPackSpell(indexData));\n\t\t}\n\t\telse {\n\t\t\tpromises.push(fixPackActor(indexData));\n\t\t}\n\t});\n\n\tawait Promise.all(promises);\n\n\tif (updates.length) {\n\t\tif (wasLocked) await pack.configure({ locked: false });\n\t\ttry {\n\t\t\tconsole.log('=> Updating:', pack.collection);\n\t\t\tif (isItem)\n\t\t\t\tawait Item.updateDocuments(updates, { pack: pack.collection });\n\t\t\telse if (isActor)\n\t\t\t\tawait Actor.updateDocuments(updates, { pack: pack.collection });\n\t\t}\n\t\tfinally {\n\t\t\tif (wasLocked) await pack.configure({ locked: true });\n\t\t}\n\t}\n}\n\nconsole.log('+++ Fixing Actors...');\nconst actorPromises = [];\ngame.actors.forEach(actor => actorPromises.push(fixActor(actor)));\nawait Promise.allSettled(actorPromises);\n\nconsole.log('+++ Fixing Scenes & Unlinked Tokens...');\nfor (const scene of game.scenes)\n\tawait fixScene(scene);\n\nconsole.log('+++ Fixing Compendiums...');\nfor (const pack of game.packs)\n\tawait fixPack(pack);\n\nconsole.log('All fixes done,', fixCounter, 'spell(s) adjusted;', spellsIgnored, 'spell(s) ignored');","flags":{"core":{"sourceId":"Macro.r7f75bI25LaOKW45"}},"_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1676498830224,"modifiedTime":1677491261760,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"r7f75bI25LaOKW45","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Apply Conditions","type":"script","scope":"global","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/spells/protect-sky-1.jpg","command":"// CONFIGURATION\n// actorNames overrides selected tokens.\n// Leave empty to use currently selected tokens/ fill to always use the same actorNames\n// Example actorNames: `actorNames: [\"Bob\", \"John\"],`\n// The rest are localization strings.\n// Conditions should apply to the current localization but these config strings need to be done manually.\nconst c = {\n\tactorNames: [],\n\twindowTitle: \"Condition Selection\",\n\twindowSubtitle: \"Apply conditions to the following tokens: \",\n\tbuttonLabels: [\"Add\", \"Remove\", \"Apply\", \"Clear\", \"Toggle\"],\n\twarningMissingActors: \"No applicable actor(s) found\"\n};\n// END CONFIGURATION\n\n//Set up targets and verify they can be edited\nconst myTokens = canvas.tokens.controlled;\nlet myActors,\n\tpreselected;\nif (c.actorNames.length > 0)\n\tmyActors = game.actors.filter(o => c.actorNames.includes(o.name));\nelse\n\tmyActors = myTokens.map(o => o.actor);\nmyActors = myActors.filter(o => o.isOwner);\nif (typeof state !== \"undefined\") { \n\tif (typeof token !== \"undefined\") myActors = [token.actor];\n\telse if (typeof actor !== \"undefined\") myActors = [actor];\n}\nif (window.macroChain?.length || event.target.nodeName == 'A') {\n\tlet inputText = window.macroChain?.pop() || event.target.textContent.trim(),\n\tregex = new RegExp(`(${c.buttonLabels.join('|')})(?:(?<!${c.buttonLabels[3]}) +([^?]+))?(\\\\?)?`),\n\t[button, conditions, prompt] = inputText.trim().match(regex)?.slice(1) ?? [];\n\tif (button) {\n\t\tbutton = c.buttonLabels.findIndex(o => o.toLowerCase().localeCompare(button.trim().toLowerCase(), undefined, {ignorePunctuation: true}) === 0);\n\t\tlet lcConditions = Object.entries(CONFIG.PF1.conditions).map(o => [o[0], o[1].toLowerCase()]);\n\t\tconditions = conditions?.split(/\\s*,\\s*/).map(o => o.toLowerCase())\n\t\t.flatMap(conSelect => {\n\t\t\tvar found = lcConditions.find(p => conSelect == p[0] || conSelect.localeCompare(p[1], undefined, {ignorePunctuation: true}) === 0);\n\t\t\tif (found)\n\t\t\t\treturn ['data.attributes.conditions.' + found[0]];\n\t\t\telse\n\t\t\t\treturn [];\n\t\t}) ?? [];\n\t\tpreselected = {button, conditions, prompt: prompt || game.keyboard.isModifierActive(\"Shift\")};\n\t}\n}\n\n//Main codeblock\nif (!myActors.length) ui.notifications.warn(c.warningMissingActors);\nelse {\n\tlet _addCond = function(htm,cond) {\n\t\tlet checks;\n\t\tif (cond) checks = cond.map(o => [o, true]);\n\t\telse\n\t\t\tchecks = Array.from(htm.querySelectorAll('input:checked')).map(o => [o.name, true]);\n\t\tmyActors.forEach(o => {\n\t\t\to.update(Object.fromEntries(checks));\n\t\t});\n\t};\n\t\n\tlet _remCond = function(htm,cond) {\n\t\tlet checks;\n\t\tif (cond) checks = cond.map(o => [o, false]);\n\t\telse\n\t\t\tchecks = Array.from(htm.querySelectorAll('input:checked')).map(o => [o.name, false]);\n\t\tmyActors.forEach(o => {\n\t\t\to.update(Object.fromEntries(checks));\n\t\t});\n\t};\n\t\n\tlet _applyCond = function(htm,cond) {\n\t\tlet checks;\n\t\tif (cond)\n\t\t\tchecks = Object.keys(CONFIG.PF1.conditions).map(o => ['data.attributes.conditions.' + o, cond.includes('data.attributes.conditions.' + o)]);\n\t\telse\n\t\t\tchecks = Array.from(htm.querySelectorAll('input')).map(o => [o.name, o.checked]);\n\t\tmyActors.forEach(o => {\n\t\t\to.update(Object.fromEntries(checks));\n\t\t});\n\t};\n\t\n\tlet _clearCond = function(htm,cond) {\n\t\tlet checks;\n\t\tif (cond)\n\t\t\tchecks = Object.keys(CONFIG.PF1.conditions).map(o => ['data.attributes.conditions.' + o, false]);\n\t\telse\n\t\t\tchecks = Array.from(htm.querySelectorAll('input')).map(o => [o.name, false]);\n\t\tmyActors.forEach(o => {\n\t\t\to.update(Object.fromEntries(checks));\n\t\t});\n\t};\n\t\n\tlet _toggleCond = function(htm,cond) {\n\t\tmyActors.forEach(o => {\n\t\t\tvar checks = [];\n\t\t\tcond.forEach(con => {\n\t\t\t\tif (getProperty(o.data, con)) checks.push([con, false]);\n\t\t\t\telse checks.push([con, true]);\n\t\t\t});\n\t\t\to.update(Object.fromEntries(checks));\n\t\t});\n\t};\n\t\n\tvar msg = '<p>' + c.windowSubtitle + myActors.map(o => o.name).join(', ') + '</p><div class=\"flexrow\">';\n\t\t\n\tObject.keys(CONFIG.PF1.conditions).forEach(o => {\n\t\tmsg += `\n<div style=\"flex: auto; padding: 0 .5em;\">\n\t<label class=\"checkbox\">\n\t<input type=\"checkbox\" name=\"data.attributes.conditions.${o}\">\n\t<span>${CONFIG.PF1.conditions[o]}</span>\n\t<label>\n</div>`;\n\t});\n\tmsg += '</div>';\n\t\n\tvar buttons = {\n\t\tadd: {\n\t\t\tlabel: c.buttonLabels[0],\n\t\t\tcallback: html => _addCond(html[0])\n\t\t},\n\t\tremove: {\n\t\t\tlabel: c.buttonLabels[1],\n\t\t\tcallback: html => _remCond(html[0])\n\t\t},\n\t\tapply: {\n\t\t\tlabel: c.buttonLabels[2],\n\t\t\tcallback: html => _applyCond(html[0])\n\t\t},\n\t\tclear: {\n\t\t\tlabel: c.buttonLabels[3],\n\t\t\tcallback: html => _clearCond(html[0])\n\t\t}\n\t};\n\t\n\tconst dialog = new Dialog({\n\t\ttitle: game.i18n.localize('PF1.ConditionPlural'),\n\t\tcontent: `<p>${msg}</p>`,\n\t\tbuttons,\n\t\tdefault: Object.keys(buttons)[preselected?.button] ?? 'add',\n\t\trender: (html) => {\n\t\t\t[...html.find(\"label.checkbox input\")].forEach(inp => {\n\t\t\t\tvar affected = myActors.filter(act => getProperty(act.data, inp.name));\n\t\t\t\tif (affected.length > 0) {\n\t\t\t\t\tinp.indeterminate = true;\n\t\t\t\t\tinp.parentNode.title = affected.map(act => act.name);\n\t\t\t\t}\n\t\t\t\tif (preselected?.prompt && preselected.conditions?.includes(inp.name))\n\t\t\t\t\tinp.checked = true;\n\t\t\t\t\tinp.indeterminate = false;\n\t\t\t});\n\t\t}\n\t});\t\n\n\tif (!preselected || preselected.prompt)\n\t\tdialog.render(true);\n\telse {\n\t\tlet buttonActions = [_addCond, _remCond, _applyCond, _clearCond, _toggleCond];\n\t\tbuttonActions[preselected.button](null, preselected.conditions);\n\t}\n\t\n}","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.rFpULpBwE8pZbLVJ"}},"_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677286191198,"modifiedTime":1677491261765,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"rFpULpBwE8pZbLVJ","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
{"name":"Show Defenses","type":"script","flags":{"core":{"sourceId":"Compendium.pf1.sample-macros.13AHAyh9DklWxvWP"}},"scope":"global","command":"game.pf1.rollDefenses();","author":"zur4Ts3bq8FsHWRr","img":"systems/pf1/icons/items/armor/shield-light-metal.png","_stats":{"systemId":"pf1","systemVersion":"0.82.5","coreVersion":"10.291","createdTime":1677285208886,"modifiedTime":1677491261770,"lastModifiedBy":"zur4Ts3bq8FsHWRr"},"_id":"tUYQk4VOGsUxCwcq","folder":null,"sort":0,"ownership":{"default":0,"zur4Ts3bq8FsHWRr":3}}
